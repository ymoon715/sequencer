{"version":3,"sources":["samples/ClosedHiHat.mp3","samples/OpenHiHat.mp3","samples/Kick.mp3","samples/Rim.mp3","samples/Snare.mp3","samples/Bass.mp3","samples/Chord1.mp3","samples/Chord2.mp3","samples/Chord3.mp3","samples/Chord4.mp3","samples/SFX.mp3","components/sequencer/Sequencer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","audioCtx","window","AudioContext","webkitAudioContext","Sequencer","state","load","sequencer","step","steps","bpm","playing","sample","togglePads","group","pad","clonedPads","_this","newPad","setState","playSample","audioContext","audioBuffer","sampleSource","createBufferSource","buffer","connect","destination","start","playLine","_this$state","onChange","e","target","value","clearInterval","interval","playSequencer","setInterval","th","this","setupSample","call","then","files","fetch","response","arrayBuffer","decodeAudioData","filePath","CHH","OHH","Kick","Rim","Snare","Bass","Chord1","Chord2","Chord3","Chord4","SFX","i","length","getFile","push","content","_this2","_this$state2","react_default","a","createElement","className","onClick","type","min","max","map","key","concat","b","c","classNames","active","on","Component","App","sequencer_Sequencer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,udCiBlCC,SAAW,IADIC,OAAOC,cAAgBD,OAAOE,qBAwOpCC,6MApObC,MAAQ,CACNC,MAAM,EACNC,UAAW,CACT,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEjCC,KAAM,EACNC,MAAO,EACPC,IAAK,IACLC,SAAS,EACTC,OAAQ,QAUVC,WAAa,SAACC,EAAOC,GACnB,IAAMC,EAAaC,EAAKZ,MAAME,UAC1BW,EAASD,EAAKZ,MAAME,UAAUO,GACO,IAArCG,EAAKZ,MAAME,UAAUO,GAAOC,IAC9BG,EAAOH,GAAO,EACdC,EAAWF,GAASI,EACpBD,EAAKE,SAAS,CAAEZ,UAAWS,KACmB,IAArCC,EAAKZ,MAAME,UAAUO,GAAOC,KACrCG,EAAOH,GAAO,EACdC,EAAWF,GAASI,EACpBD,EAAKE,SAAS,CAAEZ,UAAWS,QAgC/BI,WAAa,SAACC,EAAcC,GAC1B,IAAMC,EAAeF,EAAaG,qBAIlC,OAHAD,EAAaE,OAASH,EACtBC,EAAaG,QAAQL,EAAaM,aAClCJ,EAAaK,QACNL,KAGTM,SAAW,WAAM,IAAAC,EACeb,EAAKZ,MAA3BO,EADOkB,EACPlB,OAAQL,EADDuB,EACCvB,UACsB,IAAlCA,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEG,IAAlCL,EAAUU,EAAKZ,MAAMG,MAAM,IAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,IAEI,IAAnCL,EAAUU,EAAKZ,MAAMG,MAAM,KAC7BS,EAAKG,WAAWpB,EAAUY,EAAO,QAGrCmB,SAAW,SAAAC,GACTf,EAAKE,SAAS,CAAET,IAAKsB,EAAEC,OAAOC,MAAOvB,SAAS,IAC9CwB,cAAclB,EAAKmB,aAGrBC,cAAgB,WACTpB,EAAKZ,MAAMM,SASdM,EAAKE,SAAS,CAAER,SAAS,EAAOH,KAAM,IACtC2B,cAAclB,EAAKmB,YATnBnB,EAAKE,SAAS,CAAER,SAAS,IACzBM,EAAKmB,SAAWE,YAAY,WAC1BrB,EAAKY,WACLZ,EAAKE,SAAS,CACZX,KAAMS,EAAKZ,MAAMG,KAAO,EAAIS,EAAKZ,MAAMI,MAAQ,EAAIQ,EAAKZ,MAAMG,KAAO,KAErE,IAAaS,EAAKZ,MAAMK,IAAM,wFAzGpC,IAAI6B,EAAKC,KACTA,KAAKC,YAAYC,KAAKF,MAAMG,KAAK,SAAA/B,GAC/B2B,EAAGpB,SAAS,CAAEb,MAAM,EAAOM,OAAQA,8EAkBzBS,EAAcuB,6FACHC,MAAMD,iBAAvBE,kBACoBA,EAASC,4BAA7BA,kBACoB1B,EAAa2B,gBAAgBD,iBAAjDzB,2BACCA,iQAID2B,EAAW,CACfC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAEIhD,EAAS,GACNiD,EAAI,cAAGA,EAAIZ,EAASa,qCAC3BlD,WAAkB4B,KAAKuB,QAAQ/D,EAAUiD,EAASY,4BAA3CG,4BAD4BH,oDAG9BjD,uIAmEA,IAEHD,EAMAsD,EARGC,EAAA1B,KAAA2B,EACkB3B,KAAKnC,MAAtBO,EADDuD,EACCvD,OAAQJ,EADT2D,EACS3D,KA2FhB,OAxFEG,EADE6B,KAAKnC,MAAMM,QACHyD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAEbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAIvBN,EADa,OAAXrD,EACQ,UAGRwD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,+BAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,QAAShC,KAAKH,eACtC1B,IAGLyD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SACEG,KAAK,SACLC,IAAI,KACJC,IAAI,MACJnE,KAAK,IACL0B,MAAOM,KAAKnC,MAAMK,IAClBqB,SAAUS,KAAKT,cAKvBqC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,0BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,mBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,mBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,mBAGH9B,KAAKnC,MAAME,UAAUqE,IAAI,SAACP,EAAGR,GAAJ,OACxBO,EAAAC,EAAAC,cAAA,OAAKO,IAAG,gBAAAC,OAAkBjB,GAAKU,UAAU,iBACtCF,EAAEO,IAAI,SAACG,EAAGC,GAAJ,OACLZ,EAAAC,EAAAC,cAAA,OACEO,IAAG,OAAAC,OAASE,GACZT,UAAWU,IAAW,MAAO,CAC3BC,OAAQrB,IAAMrD,EACd2E,GAAU,IAANJ,IAENP,QAAS,kBAAMN,EAAKrD,WAAWgD,EAAGmB,aAS3CZ,EAAAC,EAAAC,cAAA,WAAML,UAjOOmB,aCLTC,0LARX,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAD,cAJUF,cCMEG,QACW,cAA7BtF,OAAOuF,SAASC,UAEe,UAA7BxF,OAAOuF,SAASC,UAEhBxF,OAAOuF,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.d4f233be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ClosedHiHat.e22b64e2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/OpenHiHat.8fe135c2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Kick.382936a3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Rim.c0acb0e2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Snare.46c08ecd.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Bass.3857e4bf.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Chord1.3ec5329c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Chord2.cc36e9c7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Chord3.7614c9e3.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Chord4.4b3a2235.mp3\";","module.exports = __webpack_public_path__ + \"static/media/SFX.9cb8458f.mp3\";","import React, { Component } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport CHH from \"../../samples/ClosedHiHat.mp3\";\r\nimport OHH from \"../../samples/OpenHiHat.mp3\";\r\nimport Kick from \"../../samples/Kick.mp3\";\r\nimport Rim from \"../../samples/Rim.mp3\";\r\nimport Snare from \"../../samples/Snare.mp3\";\r\nimport Bass from \"../../samples/Bass.mp3\";\r\nimport Chord1 from \"../../samples/Chord1.mp3\";\r\nimport Chord2 from \"../../samples/Chord2.mp3\";\r\nimport Chord3 from \"../../samples/Chord3.mp3\";\r\nimport Chord4 from \"../../samples/Chord4.mp3\";\r\nimport SFX from \"../../samples/SFX.mp3\";\r\nimport \"../../stylesheets/Sequencer.css\";\r\n\r\n// create audio context\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\r\nconst audioCtx = new AudioContext();\r\n\r\nclass Sequencer extends Component {\r\n  state = {\r\n    load: true,\r\n    sequencer: [\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    ],\r\n    step: 0,\r\n    steps: 7,\r\n    bpm: 100,\r\n    playing: false,\r\n    sample: null\r\n  };\r\n  //load samples before allowing user to play around\r\n  componentDidMount() {\r\n    let th = this;\r\n    this.setupSample.call(this).then(sample => {\r\n      th.setState({ load: false, sample: sample });\r\n    });\r\n  }\r\n  // toggle pads to activate pad\r\n  togglePads = (group, pad) => {\r\n    const clonedPads = this.state.sequencer;\r\n    let newPad = this.state.sequencer[group];\r\n    if (this.state.sequencer[group][pad] === 0) {\r\n      newPad[pad] = 1;\r\n      clonedPads[group] = newPad;\r\n      this.setState({ sequencer: clonedPads });\r\n    } else if (this.state.sequencer[group][pad] === 1) {\r\n      newPad[pad] = 0;\r\n      clonedPads[group] = newPad;\r\n      this.setState({ sequencer: clonedPads });\r\n    }\r\n  };\r\n  // fetch files and buffer them\r\n  async getFile(audioContext, files) {\r\n    const response = await fetch(files);\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n    return audioBuffer;\r\n  }\r\n\r\n  async setupSample() {\r\n    const filePath = [\r\n      CHH,\r\n      OHH,\r\n      Kick,\r\n      Rim,\r\n      Snare,\r\n      Bass,\r\n      Chord1,\r\n      Chord2,\r\n      Chord3,\r\n      Chord4,\r\n      SFX\r\n    ];\r\n    const sample = [];\r\n    for (let i = 0; i < filePath.length; i++) {\r\n      sample.push(await this.getFile(audioCtx, filePath[i]));\r\n    }\r\n    return sample;\r\n  }\r\n\r\n  playSample = (audioContext, audioBuffer) => {\r\n    const sampleSource = audioContext.createBufferSource();\r\n    sampleSource.buffer = audioBuffer;\r\n    sampleSource.connect(audioContext.destination);\r\n    sampleSource.start();\r\n    return sampleSource;\r\n  };\r\n\r\n  playLine = () => {\r\n    const { sample, sequencer } = this.state;\r\n    if (sequencer[this.state.step][0] === 1) {\r\n      this.playSample(audioCtx, sample[0]);\r\n    }\r\n    if (sequencer[this.state.step][1] === 1) {\r\n      this.playSample(audioCtx, sample[1]);\r\n    }\r\n    if (sequencer[this.state.step][2] === 1) {\r\n      this.playSample(audioCtx, sample[2]);\r\n    }\r\n    if (sequencer[this.state.step][3] === 1) {\r\n      this.playSample(audioCtx, sample[3]);\r\n    }\r\n    if (sequencer[this.state.step][4] === 1) {\r\n      this.playSample(audioCtx, sample[4]);\r\n    }\r\n    if (sequencer[this.state.step][5] === 1) {\r\n      this.playSample(audioCtx, sample[5]);\r\n    }\r\n    if (sequencer[this.state.step][6] === 1) {\r\n      this.playSample(audioCtx, sample[6]);\r\n    }\r\n    if (sequencer[this.state.step][7] === 1) {\r\n      this.playSample(audioCtx, sample[7]);\r\n    }\r\n    if (sequencer[this.state.step][8] === 1) {\r\n      this.playSample(audioCtx, sample[8]);\r\n    }\r\n    if (sequencer[this.state.step][9] === 1) {\r\n      this.playSample(audioCtx, sample[9]);\r\n    }\r\n    if (sequencer[this.state.step][10] === 1) {\r\n      this.playSample(audioCtx, sample[10]);\r\n    }\r\n  };\r\n  onChange = e => {\r\n    this.setState({ bpm: e.target.value, playing: false });\r\n    clearInterval(this.interval);\r\n  };\r\n\r\n  playSequencer = () => {\r\n    if (!this.state.playing) {\r\n      this.setState({ playing: true });\r\n      this.interval = setInterval(() => {\r\n        this.playLine();\r\n        this.setState({\r\n          step: this.state.step + 1 > this.state.steps ? 0 : this.state.step + 1\r\n        });\r\n      }, (60 * 1000) / this.state.bpm / 2);\r\n    } else {\r\n      this.setState({ playing: false, step: 0 });\r\n      clearInterval(this.interval);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { sample, step } = this.state;\r\n    let playing;\r\n    if (this.state.playing) {\r\n      playing = <i className=\"fas fa-stop\" />;\r\n    } else {\r\n      playing = <i className=\"fas fa-play\" />;\r\n    }\r\n    let content;\r\n    if (sample === null) {\r\n      content = \"Loading\";\r\n    } else {\r\n      content = (\r\n        <div className=\"container\">\r\n          <div className=\"title\">\r\n          <h3>MOON'S SEQUENCER</h3>\r\n          </div>\r\n          <div className=\"controls\">\r\n            <div className=\"control-container\">\r\n              <span>Play/Stop:</span>\r\n              <div className=\"play-stop\" onClick={this.playSequencer}>\r\n                {playing}\r\n              </div>\r\n            </div>\r\n            <div className=\"control-container\">\r\n              <span>BPM: </span>\r\n              <div className=\"play-stop\">\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"80\"\r\n                  max=\"300\"\r\n                  step=\"1\"\r\n                  value={this.state.bpm}\r\n                  onChange={this.onChange}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"sequencer\">\r\n            <div className=\"note-name-container\">\r\n              <div className=\"note-name\">\r\n                <h3>Closed Hi-Hat</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Open Hi-Hat</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Kick</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Rim</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Snare</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Bass</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Chord 1</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Chord 2</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Chord 3</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>Chord 4</h3>\r\n              </div>\r\n              <div className=\"note-name\">\r\n                <h3>SFX</h3>\r\n              </div>\r\n            </div>\r\n            {this.state.sequencer.map((a, i) => (\r\n              <div key={`pad-container${i}`} className=\"pad-container\">\r\n                {a.map((b, c) => (\r\n                  <div\r\n                    key={`pad-${c}`}\r\n                    className={classNames(\"pad\", {\r\n                      active: i === step,\r\n                      on: b === 1\r\n                    })}\r\n                    onClick={() => this.togglePads(i, c)}\r\n                  />\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return <div>{content}</div>;\r\n  }\r\n}\r\n\r\nexport default Sequencer;\r\n","import React, { Component } from \"react\";\nimport Sequencer from \"./components/sequencer/Sequencer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Sequencer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}